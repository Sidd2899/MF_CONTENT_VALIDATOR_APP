{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import './Rules.css';\n// import { FaEdit, FaTrash } from 'react-icons/fa';\n// import AddNewRule from './AddNewRule';\n// import EditRule from './EditRule';\n// import DeleteRule from './DeleteRule';\n\n// function Rules() {\n//   const [rules, setRules] = useState([]);\n//   const [showAddNewRule, setShowAddNewRule] = useState(false);\n//   const [showEditRule, setShowEditRule] = useState(false);\n//   const [showDeleteRule, setShowDeleteRule] = useState(false);\n//   const [currentRule, setCurrentRule] = useState(null);\n\n//   useEffect(() => {\n//     fetchRules();\n//   }, []);\n\n//   const fetchRules = async () => {\n//     try {\n//       const response = await fetch('http://127.0.0.1:8000/list_rules');\n//       const data = await response.json();\n//       console.log(\"data.data: \", data.data);\n//       if (data.status === 'SUCCESS') {\n//         setRules(data.data);\n//       } else {\n//         console.error('Failed to fetch rules:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching rules:', error);\n//     }\n//   };\n\n//   const handleAddRule = async (newRule) => {\n//     try {\n//       const response = await fetch('http://127.0.0.1:8000/add_rule', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(newRule)\n//       });\n//       const data = await response.json();\n//       // console.log(\"data.data: \", data.data);\n//       if (data.status === 'SUCCESS') {\n//         alert('Rule added successfully!');\n//         fetchRules(); // Refresh rules list\n//       } else {\n//         alert('Failed to add rule: ' + data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error adding rule:', error);\n//     }\n//   };\n\n//   const handleEditRule = (rule) => {\n//     setCurrentRule(rule);\n//     setShowEditRule(true);\n//   };\n\n//   const handleDeleteRule = async (rule) => {\n//     try {\n//       const response = await fetch(`http://127.0.0.1:8000/delete_rule/${rule[5]}`, {\n//         method: 'GET',\n//       });\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         alert('Rule deleted successfully!');\n//         fetchRules(); // Refresh rules list\n//       } else {\n//         alert('Failed to delete rule: ' + data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error deleting rule:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"rules\">\n//       <div className=\"rules-heading\">\n//         <div>Rules</div>\n//         <div><button className=\"rules__add-new-button\" onClick={() => setShowAddNewRule(true)}>+ Add New</button></div>\n//       </div>\n//       <table className=\"rules__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Sr. No.</th>\n//             <th>Rule Name</th>\n//             <th>Media Type</th>\n//             <th>Description</th>\n//             <th>Program</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {rules.length > 0 ? (\n//             rules.map((rule, index) => (\n//               <tr key={index}>\n//                 <td>{index + 1}</td>\n//                 <td>{rule[0]}</td>\n//                 <td>{rule[1]}</td>\n//                 <td>{rule[2]}</td>\n//                 <td>{rule[4]}</td>\n//                 <td>\n//                   {console.log(\"RULE: \",rule)}\n//                   <button className=\"rules__edit-button\" onClick={() => handleEditRule(rule)}><FaEdit /> Edit</button>\n//                   <button className=\"rules__delete-button\" onClick={() => { setCurrentRule(rule); setShowDeleteRule(true); }}><FaTrash /> Delete</button>\n//                 </td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"6\">No rules found</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//       {showAddNewRule && (\n//         <AddNewRule \n//           onClose={() => setShowAddNewRule(false)}\n//           onAddRule={handleAddRule} \n//         />\n//       )}\n//       {showEditRule && (\n//         <EditRule\n//           onClose={() => {\n//             setShowEditRule(false);\n//             fetchRules(); // Refresh the rules after edit\n//           }}\n//           rule={currentRule}\n//         />\n//       )}\n//       {showDeleteRule && (\n//         <DeleteRule\n//           onClose={() => setShowDeleteRule(false)}\n//           onDelete={handleDeleteRule}\n//           rule={currentRule}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Rules;","map":{"version":3,"names":[],"sources":["/home/user/Market_Content_Validator/market-content-app/Frontend/src/components/Rules.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './Rules.css';\n// import { FaEdit, FaTrash } from 'react-icons/fa';\n// import AddNewRule from './AddNewRule';\n// import EditRule from './EditRule';\n// import DeleteRule from './DeleteRule';\n\n// function Rules() {\n//   const [rules, setRules] = useState([]);\n//   const [showAddNewRule, setShowAddNewRule] = useState(false);\n//   const [showEditRule, setShowEditRule] = useState(false);\n//   const [showDeleteRule, setShowDeleteRule] = useState(false);\n//   const [currentRule, setCurrentRule] = useState(null);\n\n//   useEffect(() => {\n//     fetchRules();\n//   }, []);\n\n//   const fetchRules = async () => {\n//     try {\n//       const response = await fetch('http://127.0.0.1:8000/list_rules');\n//       const data = await response.json();\n//       console.log(\"data.data: \", data.data);\n//       if (data.status === 'SUCCESS') {\n//         setRules(data.data);\n//       } else {\n//         console.error('Failed to fetch rules:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching rules:', error);\n//     }\n//   };\n\n//   const handleAddRule = async (newRule) => {\n//     try {\n//       const response = await fetch('http://127.0.0.1:8000/add_rule', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(newRule)\n//       });\n//       const data = await response.json();\n//       // console.log(\"data.data: \", data.data);\n//       if (data.status === 'SUCCESS') {\n//         alert('Rule added successfully!');\n//         fetchRules(); // Refresh rules list\n//       } else {\n//         alert('Failed to add rule: ' + data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error adding rule:', error);\n//     }\n//   };\n\n//   const handleEditRule = (rule) => {\n//     setCurrentRule(rule);\n//     setShowEditRule(true);\n//   };\n\n//   const handleDeleteRule = async (rule) => {\n//     try {\n//       const response = await fetch(`http://127.0.0.1:8000/delete_rule/${rule[5]}`, {\n//         method: 'GET',\n//       });\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         alert('Rule deleted successfully!');\n//         fetchRules(); // Refresh rules list\n//       } else {\n//         alert('Failed to delete rule: ' + data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error deleting rule:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"rules\">\n//       <div className=\"rules-heading\">\n//         <div>Rules</div>\n//         <div><button className=\"rules__add-new-button\" onClick={() => setShowAddNewRule(true)}>+ Add New</button></div>\n//       </div>\n//       <table className=\"rules__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Sr. No.</th>\n//             <th>Rule Name</th>\n//             <th>Media Type</th>\n//             <th>Description</th>\n//             <th>Program</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {rules.length > 0 ? (\n//             rules.map((rule, index) => (\n//               <tr key={index}>\n//                 <td>{index + 1}</td>\n//                 <td>{rule[0]}</td>\n//                 <td>{rule[1]}</td>\n//                 <td>{rule[2]}</td>\n//                 <td>{rule[4]}</td>\n//                 <td>\n//                   {console.log(\"RULE: \",rule)}\n//                   <button className=\"rules__edit-button\" onClick={() => handleEditRule(rule)}><FaEdit /> Edit</button>\n//                   <button className=\"rules__delete-button\" onClick={() => { setCurrentRule(rule); setShowDeleteRule(true); }}><FaTrash /> Delete</button>\n//                 </td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"6\">No rules found</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//       {showAddNewRule && (\n//         <AddNewRule \n//           onClose={() => setShowAddNewRule(false)}\n//           onAddRule={handleAddRule} \n//         />\n//       )}\n//       {showEditRule && (\n//         <EditRule\n//           onClose={() => {\n//             setShowEditRule(false);\n//             fetchRules(); // Refresh the rules after edit\n//           }}\n//           rule={currentRule}\n//         />\n//       )}\n//       {showDeleteRule && (\n//         <DeleteRule\n//           onClose={() => setShowDeleteRule(false)}\n//           onDelete={handleDeleteRule}\n//           rule={currentRule}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Rules;\n\n\n\n\n\n\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}