{"ast":null,"code":"var _jsxFileName = \"/home/user/Market_Content_Validator/market-content-app/Frontend/src/components/ProgramTypes.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './ProgramTypes.css';\n// import { FaEdit, FaTrash } from 'react-icons/fa';\n// import AddNewProgram from './AddNewProgram';\n\n// function ProgramTypes({ onEditProgram }) {\n//   const [programs, setPrograms] = useState([]);\n//   const [showAddNewProgram, setShowAddNewProgram] = useState(false);\n\n//   useEffect(() => {\n//     fetchPrograms();\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch('http://127.0.0.1:8000/list_programs');\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setPrograms(data.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleAddProgram = (newProgram) => {\n//     setPrograms([...programs, newProgram]);\n//   };\n\n//   return (\n//     <div className=\"program-types\">\n//       <div className=\"program-types-heading\">\n//         <div>Program Types</div>\n//         <div><button className=\"program-types__add-new-button\" onClick={() => setShowAddNewProgram(true)}>+ Add New</button></div>\n//       </div>\n//       <table className=\"program-types__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Type of Content</th>\n//             <th>Description</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {programs.length > 0 ? (\n//             programs.map((program, index) => (\n//               <tr key={index}>\n//                 <td>{program[0]}</td>\n//                 <td>{program[1]}</td>\n//                 <td>\n//                   <button className=\"program-types__edit-button\" onClick={() => onEditProgram(program)}><FaEdit /> Edit</button>\n//                   <button className=\"program-types__delete-button\"><FaTrash /> Delete</button>\n//                 </td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"3\">No programs found</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//       {showAddNewProgram && (\n//         <AddNewProgram\n//           onClose={() => setShowAddNewProgram(false)}\n//           onAddProgram={handleAddProgram}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ProgramTypes;\n\n// import React, { useState, useEffect } from 'react';\n// import './ProgramTypes.css';\n// import { FaEdit, FaTrash } from 'react-icons/fa';\n// import AddNewProgram from './AddNewProgram';\n// import EditProgram from './EditProgram';\n\n// function ProgramTypes() {\n//   const [programs, setPrograms] = useState([]);\n//   const [showAddNewProgram, setShowAddNewProgram] = useState(false);\n//   const [showEditProgram, setShowEditProgram] = useState(false);\n//   const [currentProgram, setCurrentProgram] = useState(null);\n\n//   useEffect(() => {\n//     fetchPrograms();\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch('http://127.0.0.1:8000/list_programs');\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setPrograms(data.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleEditProgram = (program) => {\n//     setCurrentProgram(program);\n//     setShowEditProgram(true);\n//   };\n\n//   return (\n//     <div className=\"program-types\">\n//       <div className=\"program-types-heading\">\n//         <div>Program Types</div>\n//         <div><button className=\"program-types__add-new-button\" onClick={() => setShowAddNewProgram(true)}>+ Add New</button></div>\n//       </div>\n//       <table className=\"program-types__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Type of Content</th>\n//             <th>Description</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {programs.length > 0 ? (\n//             programs.map((program, index) => (\n//               <tr key={index}>\n//                 <td>{program[0]}</td>\n//                 <td>{program[1]}</td>\n//                 {console.log(\"Programs: \",program)}\n//                 <td>\n//                   <button className=\"program-types__edit-button\" onClick={() => handleEditProgram(program)}><FaEdit /> Edit</button>\n//                   <button className=\"program-types__delete-button\"><FaTrash /> Delete</button>\n//                 </td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"3\">No programs found</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//       {showAddNewProgram && (\n//         <AddNewProgram\n//           onClose={() => setShowAddNewProgram(false)}\n//         />\n//       )}\n//       {showEditProgram && (\n//         <EditProgram\n//           onClose={() => setShowEditProgram(false)}\n//           program={currentProgram}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ProgramTypes;\n\n// import React, { useState, useEffect } from 'react';\n// import './ProgramTypes.css';\n// import { FaEdit, FaTrash } from 'react-icons/fa';\n// import AddNewProgram from './AddNewProgram';\n// import EditProgram from './EditProgram';\n\n// function ProgramTypes() {\n//   const [programs, setPrograms] = useState([]);\n//   const [showAddNewProgram, setShowAddNewProgram] = useState(false);\n//   const [showEditProgram, setShowEditProgram] = useState(false);\n//   const [currentProgram, setCurrentProgram] = useState(null);\n\n//   useEffect(() => {\n//     fetchPrograms();\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch('http://127.0.0.1:8000/list_programs');\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setPrograms(data.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleEditProgram = (program) => {\n//     setCurrentProgram(program);\n//     setShowEditProgram(true);\n//   };\n\n//   return (\n//     <div className=\"program-types\">\n//       <div className=\"program-types-heading\">\n//         <div>Program Types</div>\n//         <div><button className=\"program-types__add-new-button\" onClick={() => setShowAddNewProgram(true)}>+ Add New</button></div>\n//       </div>\n//       <table className=\"program-types__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Type of Content</th>\n//             <th>Description</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {programs.length > 0 ? (\n//             programs.map((program, index) => (\n//               <tr key={index}>\n//                 <td>{program[0]}</td>\n//                 <td>{program[1]}</td>\n//                 <td>\n//                   <button className=\"program-types__edit-button\" onClick={() => handleEditProgram(program)}><FaEdit /> Edit</button>\n//                   <button className=\"program-types__delete-button\"><FaTrash /> Delete</button>\n//                 </td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"3\">No programs found</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//       {showAddNewProgram && (\n//         <AddNewProgram\n//           onClose={() => setShowAddNewProgram(false)}\n//         />\n//       )}\n//       {showEditProgram && (\n//         <EditProgram\n//           onClose={() => setShowEditProgram(false)}\n//           program={currentProgram}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ProgramTypes;\n\n// import React, { useState, useEffect } from 'react';\n// import './ProgramTypes.css';\n// import { FaEdit, FaTrash } from 'react-icons/fa';\n// import AddNewProgram from './AddNewProgram';\n// import EditProgram from './EditProgram';\n\n// function ProgramTypes() {\n//   const [programs, setPrograms] = useState([]);\n//   const [showAddNewProgram, setShowAddNewProgram] = useState(false);\n//   const [showEditProgram, setShowEditProgram] = useState(false);\n//   const [currentProgram, setCurrentProgram] = useState(null);\n\n//   useEffect(() => {\n//     fetchPrograms();\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch('http://127.0.0.1:8000/list_programs');\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setPrograms(data.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleEditProgram = (program) => {\n//     setCurrentProgram(program);\n//     setShowEditProgram(true);\n//   };\n\n//   const handleAddProgram = (newProgram) => {\n//     setPrograms([...programs, newProgram]);\n//   };\n\n//   const handleUpdateProgram = (updatedProgram) => {\n//     setPrograms(programs.map((program) =>\n//       program[2] === updatedProgram[2] ? updatedProgram : program\n//     ));\n//   };\n\n//   return (\n//     <div className=\"program-types\">\n//       <div className=\"program-types-heading\">\n//         <div>Program Types</div>\n//         <div><button className=\"program-types__add-new-button\" onClick={() => setShowAddNewProgram(true)}>+ Add New</button></div>\n//       </div>\n//       <table className=\"program-types__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Type of Content</th>\n//             <th>Description</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {programs.length > 0 ? (\n//             programs.map((program, index) => (\n//               <tr key={index}>\n//                 <td>{program[0]}</td>\n//                 <td>{program[1]}</td>\n//                 <td>\n//                   {console.log(\"HHHHHHH: \",program)}\n//                   <button className=\"program-types__edit-button\" onClick={() => handleEditProgram(program)}><FaEdit /> Edit</button>\n//                   <button className=\"program-types__delete-button\"><FaTrash /> Delete</button>\n//                 </td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"3\">No programs found</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//       {showAddNewProgram && (\n//         <AddNewProgram\n//           onClose={() => setShowAddNewProgram(false)}\n//           onAddProgram={handleAddProgram}\n//         />\n//       )}\n//       {showEditProgram && (\n//         <EditProgram\n//           onClose={() => setShowEditProgram(false)}\n//           program={currentProgram}\n//           onEditProgram={handleUpdateProgram}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ProgramTypes;\n\nimport React, { useState, useEffect } from 'react';\nimport './ProgramTypes.css';\nimport { FaEdit, FaTrash } from 'react-icons/fa';\nimport AddNewProgram from './AddNewProgram';\nimport EditProgram from './EditProgram';\nimport DeleteProgram from './DeleteProgram';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProgramTypes() {\n  _s();\n  const [programs, setPrograms] = useState([]);\n  const [showAddNewProgram, setShowAddNewProgram] = useState(false);\n  const [showEditProgram, setShowEditProgram] = useState(false);\n  const [showDeleteProgram, setShowDeleteProgram] = useState(false);\n  const [currentProgram, setCurrentProgram] = useState(null);\n  useEffect(() => {\n    fetchPrograms();\n  }, []);\n  const fetchPrograms = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:8000/list_programs');\n      const data = await response.json();\n      if (data.status === 'SUCCESS') {\n        setPrograms(data.data);\n      } else {\n        console.error('Failed to fetch programs:', data.data);\n      }\n    } catch (error) {\n      console.error('Error fetching programs:', error);\n    }\n  };\n  const handleEditProgram = program => {\n    setCurrentProgram(program);\n    setShowEditProgram(true);\n  };\n  const handleDeleteProgram = program => {\n    setCurrentProgram(program);\n    setShowDeleteProgram(true);\n  };\n  const handleAddProgram = newProgram => {\n    setPrograms([...programs, newProgram]);\n  };\n  const handleUpdateProgram = updatedProgram => {\n    setPrograms(programs.map(program => program[2] === updatedProgram[2] ? updatedProgram : program));\n  };\n  const handleConfirmDelete = async program => {\n    try {\n      const response = await fetch(`http://127.0.0.1:8000/delete_program/${program[2]}`, {\n        method: 'DELETE'\n      });\n      const data = await response.json();\n      if (data.status === 'SUCCESS') {\n        alert('Program deleted successfully!');\n        setPrograms(programs.filter(p => p[2] !== program[2]));\n      } else {\n        alert('Failed to delete program: ' + data.data);\n      }\n    } catch (error) {\n      console.error('Error deleting program:', error);\n      alert('Error deleting program');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"program-types\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"program-types-heading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Program Types\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"program-types__add-new-button\",\n          onClick: () => setShowAddNewProgram(true),\n          children: \"+ Add New\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"program-types__content-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Type of Content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: programs.length > 0 ? programs.map((program, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: program[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: program[1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"program-types__edit-button\",\n              onClick: () => handleEditProgram(program),\n              children: [/*#__PURE__*/_jsxDEV(FaEdit, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 109\n              }, this), \" Edit\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"program-types__delete-button\",\n              onClick: () => handleDeleteProgram(program),\n              children: [/*#__PURE__*/_jsxDEV(FaTrash, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 458,\n                columnNumber: 113\n              }, this), \" Delete\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"3\",\n            children: \"No programs found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }, this), showAddNewProgram && /*#__PURE__*/_jsxDEV(AddNewProgram, {\n      onClose: () => setShowAddNewProgram(false),\n      onAddProgram: handleAddProgram\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 9\n    }, this), showEditProgram && /*#__PURE__*/_jsxDEV(EditProgram, {\n      onClose: () => setShowEditProgram(false),\n      program: currentProgram,\n      onEditProgram: handleUpdateProgram\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 9\n    }, this), showDeleteProgram && /*#__PURE__*/_jsxDEV(DeleteProgram, {\n      onClose: () => setShowDeleteProgram(false),\n      program: currentProgram,\n      onDelete: handleConfirmDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 437,\n    columnNumber: 5\n  }, this);\n}\n_s(ProgramTypes, \"rNzRIsCbjeztZxTo0SQsx/7ZZYI=\");\n_c = ProgramTypes;\nexport default ProgramTypes;\nvar _c;\n$RefreshReg$(_c, \"ProgramTypes\");","map":{"version":3,"names":["React","useState","useEffect","FaEdit","FaTrash","AddNewProgram","EditProgram","DeleteProgram","jsxDEV","_jsxDEV","ProgramTypes","_s","programs","setPrograms","showAddNewProgram","setShowAddNewProgram","showEditProgram","setShowEditProgram","showDeleteProgram","setShowDeleteProgram","currentProgram","setCurrentProgram","fetchPrograms","response","fetch","data","json","status","console","error","handleEditProgram","program","handleDeleteProgram","handleAddProgram","newProgram","handleUpdateProgram","updatedProgram","map","handleConfirmDelete","method","alert","filter","p","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","index","colSpan","onClose","onAddProgram","onEditProgram","onDelete","_c","$RefreshReg$"],"sources":["/home/user/Market_Content_Validator/market-content-app/Frontend/src/components/ProgramTypes.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './ProgramTypes.css';\n// import { FaEdit, FaTrash } from 'react-icons/fa';\n// import AddNewProgram from './AddNewProgram';\n\n// function ProgramTypes({ onEditProgram }) {\n//   const [programs, setPrograms] = useState([]);\n//   const [showAddNewProgram, setShowAddNewProgram] = useState(false);\n\n//   useEffect(() => {\n//     fetchPrograms();\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch('http://127.0.0.1:8000/list_programs');\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setPrograms(data.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleAddProgram = (newProgram) => {\n//     setPrograms([...programs, newProgram]);\n//   };\n\n//   return (\n//     <div className=\"program-types\">\n//       <div className=\"program-types-heading\">\n//         <div>Program Types</div>\n//         <div><button className=\"program-types__add-new-button\" onClick={() => setShowAddNewProgram(true)}>+ Add New</button></div>\n//       </div>\n//       <table className=\"program-types__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Type of Content</th>\n//             <th>Description</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {programs.length > 0 ? (\n//             programs.map((program, index) => (\n//               <tr key={index}>\n//                 <td>{program[0]}</td>\n//                 <td>{program[1]}</td>\n//                 <td>\n//                   <button className=\"program-types__edit-button\" onClick={() => onEditProgram(program)}><FaEdit /> Edit</button>\n//                   <button className=\"program-types__delete-button\"><FaTrash /> Delete</button>\n//                 </td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"3\">No programs found</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//       {showAddNewProgram && (\n//         <AddNewProgram\n//           onClose={() => setShowAddNewProgram(false)}\n//           onAddProgram={handleAddProgram}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ProgramTypes;\n\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import './ProgramTypes.css';\n// import { FaEdit, FaTrash } from 'react-icons/fa';\n// import AddNewProgram from './AddNewProgram';\n// import EditProgram from './EditProgram';\n\n// function ProgramTypes() {\n//   const [programs, setPrograms] = useState([]);\n//   const [showAddNewProgram, setShowAddNewProgram] = useState(false);\n//   const [showEditProgram, setShowEditProgram] = useState(false);\n//   const [currentProgram, setCurrentProgram] = useState(null);\n\n//   useEffect(() => {\n//     fetchPrograms();\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch('http://127.0.0.1:8000/list_programs');\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setPrograms(data.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleEditProgram = (program) => {\n//     setCurrentProgram(program);\n//     setShowEditProgram(true);\n//   };\n\n//   return (\n//     <div className=\"program-types\">\n//       <div className=\"program-types-heading\">\n//         <div>Program Types</div>\n//         <div><button className=\"program-types__add-new-button\" onClick={() => setShowAddNewProgram(true)}>+ Add New</button></div>\n//       </div>\n//       <table className=\"program-types__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Type of Content</th>\n//             <th>Description</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {programs.length > 0 ? (\n//             programs.map((program, index) => (\n//               <tr key={index}>\n//                 <td>{program[0]}</td>\n//                 <td>{program[1]}</td>\n//                 {console.log(\"Programs: \",program)}\n//                 <td>\n//                   <button className=\"program-types__edit-button\" onClick={() => handleEditProgram(program)}><FaEdit /> Edit</button>\n//                   <button className=\"program-types__delete-button\"><FaTrash /> Delete</button>\n//                 </td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"3\">No programs found</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//       {showAddNewProgram && (\n//         <AddNewProgram\n//           onClose={() => setShowAddNewProgram(false)}\n//         />\n//       )}\n//       {showEditProgram && (\n//         <EditProgram\n//           onClose={() => setShowEditProgram(false)}\n//           program={currentProgram}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ProgramTypes;\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import './ProgramTypes.css';\n// import { FaEdit, FaTrash } from 'react-icons/fa';\n// import AddNewProgram from './AddNewProgram';\n// import EditProgram from './EditProgram';\n\n// function ProgramTypes() {\n//   const [programs, setPrograms] = useState([]);\n//   const [showAddNewProgram, setShowAddNewProgram] = useState(false);\n//   const [showEditProgram, setShowEditProgram] = useState(false);\n//   const [currentProgram, setCurrentProgram] = useState(null);\n\n//   useEffect(() => {\n//     fetchPrograms();\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch('http://127.0.0.1:8000/list_programs');\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setPrograms(data.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleEditProgram = (program) => {\n//     setCurrentProgram(program);\n//     setShowEditProgram(true);\n//   };\n\n//   return (\n//     <div className=\"program-types\">\n//       <div className=\"program-types-heading\">\n//         <div>Program Types</div>\n//         <div><button className=\"program-types__add-new-button\" onClick={() => setShowAddNewProgram(true)}>+ Add New</button></div>\n//       </div>\n//       <table className=\"program-types__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Type of Content</th>\n//             <th>Description</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {programs.length > 0 ? (\n//             programs.map((program, index) => (\n//               <tr key={index}>\n//                 <td>{program[0]}</td>\n//                 <td>{program[1]}</td>\n//                 <td>\n//                   <button className=\"program-types__edit-button\" onClick={() => handleEditProgram(program)}><FaEdit /> Edit</button>\n//                   <button className=\"program-types__delete-button\"><FaTrash /> Delete</button>\n//                 </td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"3\">No programs found</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//       {showAddNewProgram && (\n//         <AddNewProgram\n//           onClose={() => setShowAddNewProgram(false)}\n//         />\n//       )}\n//       {showEditProgram && (\n//         <EditProgram\n//           onClose={() => setShowEditProgram(false)}\n//           program={currentProgram}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ProgramTypes;\n\n\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import './ProgramTypes.css';\n// import { FaEdit, FaTrash } from 'react-icons/fa';\n// import AddNewProgram from './AddNewProgram';\n// import EditProgram from './EditProgram';\n\n// function ProgramTypes() {\n//   const [programs, setPrograms] = useState([]);\n//   const [showAddNewProgram, setShowAddNewProgram] = useState(false);\n//   const [showEditProgram, setShowEditProgram] = useState(false);\n//   const [currentProgram, setCurrentProgram] = useState(null);\n\n//   useEffect(() => {\n//     fetchPrograms();\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch('http://127.0.0.1:8000/list_programs');\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setPrograms(data.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleEditProgram = (program) => {\n//     setCurrentProgram(program);\n//     setShowEditProgram(true);\n//   };\n\n//   const handleAddProgram = (newProgram) => {\n//     setPrograms([...programs, newProgram]);\n//   };\n\n//   const handleUpdateProgram = (updatedProgram) => {\n//     setPrograms(programs.map((program) =>\n//       program[2] === updatedProgram[2] ? updatedProgram : program\n//     ));\n//   };\n\n//   return (\n//     <div className=\"program-types\">\n//       <div className=\"program-types-heading\">\n//         <div>Program Types</div>\n//         <div><button className=\"program-types__add-new-button\" onClick={() => setShowAddNewProgram(true)}>+ Add New</button></div>\n//       </div>\n//       <table className=\"program-types__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Type of Content</th>\n//             <th>Description</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {programs.length > 0 ? (\n//             programs.map((program, index) => (\n//               <tr key={index}>\n//                 <td>{program[0]}</td>\n//                 <td>{program[1]}</td>\n//                 <td>\n//                   {console.log(\"HHHHHHH: \",program)}\n//                   <button className=\"program-types__edit-button\" onClick={() => handleEditProgram(program)}><FaEdit /> Edit</button>\n//                   <button className=\"program-types__delete-button\"><FaTrash /> Delete</button>\n//                 </td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"3\">No programs found</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//       {showAddNewProgram && (\n//         <AddNewProgram\n//           onClose={() => setShowAddNewProgram(false)}\n//           onAddProgram={handleAddProgram}\n//         />\n//       )}\n//       {showEditProgram && (\n//         <EditProgram\n//           onClose={() => setShowEditProgram(false)}\n//           program={currentProgram}\n//           onEditProgram={handleUpdateProgram}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ProgramTypes;\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport './ProgramTypes.css';\nimport { FaEdit, FaTrash } from 'react-icons/fa';\nimport AddNewProgram from './AddNewProgram';\nimport EditProgram from './EditProgram';\nimport DeleteProgram from './DeleteProgram';\n\nfunction ProgramTypes() {\n  const [programs, setPrograms] = useState([]);\n  const [showAddNewProgram, setShowAddNewProgram] = useState(false);\n  const [showEditProgram, setShowEditProgram] = useState(false);\n  const [showDeleteProgram, setShowDeleteProgram] = useState(false);\n  const [currentProgram, setCurrentProgram] = useState(null);\n\n  useEffect(() => {\n    fetchPrograms();\n  }, []);\n\n  const fetchPrograms = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:8000/list_programs');\n      const data = await response.json();\n      if (data.status === 'SUCCESS') {\n        setPrograms(data.data);\n      } else {\n        console.error('Failed to fetch programs:', data.data);\n      }\n    } catch (error) {\n      console.error('Error fetching programs:', error);\n    }\n  };\n\n  const handleEditProgram = (program) => {\n    setCurrentProgram(program);\n    setShowEditProgram(true);\n  };\n\n  const handleDeleteProgram = (program) => {\n    setCurrentProgram(program);\n    setShowDeleteProgram(true);\n  };\n\n  const handleAddProgram = (newProgram) => {\n    setPrograms([...programs, newProgram]);\n  };\n\n  const handleUpdateProgram = (updatedProgram) => {\n    setPrograms(programs.map((program) =>\n      program[2] === updatedProgram[2] ? updatedProgram : program\n    ));\n  };\n\n  const handleConfirmDelete = async (program) => {\n    try {\n      const response = await fetch(`http://127.0.0.1:8000/delete_program/${program[2]}`, {\n        method: 'DELETE',\n      });\n      const data = await response.json();\n      if (data.status === 'SUCCESS') {\n        alert('Program deleted successfully!');\n        setPrograms(programs.filter(p => p[2] !== program[2]));\n      } else {\n        alert('Failed to delete program: ' + data.data);\n      }\n    } catch (error) {\n      console.error('Error deleting program:', error);\n      alert('Error deleting program');\n    }\n  };\n\n  return (\n    <div className=\"program-types\">\n      <div className=\"program-types-heading\">\n        <div>Program Types</div>\n        <div><button className=\"program-types__add-new-button\" onClick={() => setShowAddNewProgram(true)}>+ Add New</button></div>\n      </div>\n      <table className=\"program-types__content-table\">\n        <thead>\n          <tr>\n            <th>Type of Content</th>\n            <th>Description</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {programs.length > 0 ? (\n            programs.map((program, index) => (\n              <tr key={index}>\n                <td>{program[0]}</td>\n                <td>{program[1]}</td>\n                <td>\n                  <button className=\"program-types__edit-button\" onClick={() => handleEditProgram(program)}><FaEdit /> Edit</button>\n                  <button className=\"program-types__delete-button\" onClick={() => handleDeleteProgram(program)}><FaTrash /> Delete</button>\n                </td>\n              </tr>\n            ))\n          ) : (\n            <tr>\n              <td colSpan=\"3\">No programs found</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      {showAddNewProgram && (\n        <AddNewProgram\n          onClose={() => setShowAddNewProgram(false)}\n          onAddProgram={handleAddProgram}\n        />\n      )}\n      {showEditProgram && (\n        <EditProgram\n          onClose={() => setShowEditProgram(false)}\n          program={currentProgram}\n          onEditProgram={handleUpdateProgram}\n        />\n      )}\n      {showDeleteProgram && (\n        <DeleteProgram\n          onClose={() => setShowDeleteProgram(false)}\n          program={currentProgram}\n          onDelete={handleConfirmDelete}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default ProgramTypes;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAQA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}